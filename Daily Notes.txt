DAY-1:
======

	HTML:Hyper text markup language 



static web pages :HTML
				.html
				<html>
dynamic


Registration Page 

username
password
cpassword

gender
languages known....
file
submit .....

	
	form tags 
	
		<form>
		<input type="text" name="xyz" id="sleepping">
		
		
		
		</form>

https://www.w3schools.com/html/default.asp



CSS:
	Cascading style sheet
							3
	
	1)inline
	2)internal
	3)external


			
SYntax:

		selector{propname:propvalue;propname:propvalue;.....}



		1)id selector			#
		2)class selector		.
		3)element selector		h1
		4)group slector			h1,h2,p
		5)all selector			*
		
		
	Bootstrap	 
		
		CDN
		
		
		JS	:1)we can change html content
			 2)we can change style html
			 3)we can apply front end validation
			 
			-->OOPS	
		
		TS
		
		
	1)inline JS		<body><scirpt>
	2)internal JS	<head><scirpt>
	3)external JS	.js

		
		myfunctions.js
		
		<script src ="myfunctions.js" ></script>
		
		<script src ="react.js" ></script>		
		
	
variables
		var/let/const	age=33
	
		
		var-->function scope
		let-->block scope
		const-->block scope ,fixed 
		
		
			var  name="dell";
			
			
			
			local variable
			global variable
			
			
		function printAdd(a,b)
		{
			var result=a+b;
			document.write("Add of two numbers: "+result)
			console.log("Add of two numbers in console: "+result)
			alert("welcome to javascript")
		}		
			
			
	BASIC		
			
	Arrays
	Events
	Object	
	String 	
			
			
			LOGIN FORM
			
			USERNAME
			
			PASSWORD
			
						submit
		
		ECMA SCRIPT--->jscript-->ES2015 or ES6
		
		username="dell" password="dellindia"
		
	alert	login sucess
		
	alert	enter valid credntials
		
		
		
TypeScript:
==============

		TypeScript=JS+Types

js
	var name="dell";//dynamic typed programming
	
		name=123;
		name=true;

ts
	var name:string="dell"; static typed 

			name=123;//invalid




		function display(a:number):string
		{
		
		}


Angular:-Google
=========
angualarjs-->JS-->dynamic typed PL

angular2-->TS -->static typed PL		 ts=js+DT

		SPA/MPA

		Component-->APP-->building block webapp

		MVC

	Angular 	two way data binding
	
	React-->VIEW  VIRTUAL DOM
	
	
	MERN-->
	MEAN
	
	ng g c component_name		spec --skip-tests true
	ng g p pipe_name
	ng g s service_name
	ng g d directive_name
	ng g m module_name
	
							
	@Component({
  selector: 'dell',
  template: `
    <h1>welcome to angularIO</h1>
  `,
  styles: [`h1{
    color:red;
    background-color:yellow
  }`]
})
export class AppComponent {
  orgName:string="Dell India"
}

	  ng generate component login --skip-tests true
	  
	  ng g c login/forgotpassword --skip-tests true  (creation of nested component)
	 
	  ng g c register    
		
		
		model(ts) -->view(html)
	  <p>{{12+13>20}}</p>
  <p>{{"qwerty"+"india"}}</p>
  
  
    emp:any[];
  constructor() {
    this.emp=[
      {empcode:'emp101',name:"akash",dateOfBirth:'10/11/1993',gender:"male",sal:12000.123},
     {empcode:'emp102',name:"pranay" ,dateOfBirth:'08/23/1990',gender:"male",sal:22000.123},
    {empcode:'emp103',name:"srikanth", dateOfBirth:'06/11/1991',gender:"male", sal:32000.121},
    {empcode:'emp104',name:"deepa" ,dateOfBirth:'07/15/1988',gender:"female",sal:42000.900},
    {empcode:'emp105',name:"ramya" ,dateOfBirth:'06/19/1993',gender:"female",sal:200000.63125}
      ];
   }

		
<html>
    <head>

    </head>
    <body>
        <h3>Employees Info:</h3>
        <table class="table table-dark table-striped">
            <tr>
                <th>EmpId</th>
                <th>EmpName</th>
                <th>DOB</th>
                <th>Gender</th>
                <th>Salary</th>
            </tr>
            <tr *ngFor="let emp of emps">
                <td>{{emp.empcode}}</td>
                <td>{{emp.name}}</td>
                <td>{{emp.dateOfBirth}}</td>
                <td>{{emp.gender}}</td>
                <td>{{emp.sal}}</td>
            </tr>
            <tr *ngIf="emps.length==0">
                <td>NO Employees Info TO Display</td>
            </tr>
        </table>
    </body>

</html>



Pipes:
=======
filtering / tranform

		| pipename

	predefined 			userdefined/custom pipe 


PipeTransform
@Pipe
{
	'gender'
}

class GenderPipe implements PipeTransform

	tranform


ng generate pipe gender

	2 files
	
	ts
	spec.ts


https://angular.io/guide/pipes


Routing And Navigation:
======================
	yes
	no


	app-routing.module.ts 
		
			routing config
			
n g m app-routing.module.ts --flat --module

  <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
    <ul class="navbar-nav">
      <li class="nav-item active">
        <a class="nav-link" routerLink="login">LOGIN</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" routerLink="register">REGISTER</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" routerLink="emps">EMPLOYEE</a>
      </li>
    </ul>
  </nav>


Angular Forms:
=============

 2 types 
	
	1)Template driven forms  html
	2)model driven form/reactive forms  ts



Life Cycle Hooks:
================
	Life cycle hooks are events which are ocurred during life cycle of a component

Component-->intialization  to destruction


interfaces

interface -->implements


				oninit(optional)
				ngoninit
				
constructor(DI):called before any hook to inject dependency

ngOnChanges:called after a bound input property changes
ngOnInit:called once the component is intialized
ngDoCheck:called during every change detection run
ngAfterContentInit:called after the ng-content is projected to the view 
ngAfterContentChecked
ngAfterViewInit
ngAfterViewInitChecked
ngOnDestroy		called once the component is about to destroy 



Component Communication:
=========================

Parent To Child:
===================
app.componet.ts

export class AppComponent {
  username: string = "Dell India";
}

app.component.html

<child  [uname]="username" > </child>


child.component.ts

export class ChildComponent {
  @Input()
  uname: string;
  }
  
child.componet.html
<p>In Child, The Data From Parent is:{{uname}}</p>  


Child To Parent:
===================
child.component.ts

export class ChildComponent {
  @Input()
  uname: string;
  
  @Output()
  notify: EventEmitter<string> = new EventEmitter<string>();
  passData() {
    this.notify.emit("Rps Consulting");
  }
}

child.component.html

<div>
<p>In Child, The Data From Parent is:{{uname}}</p>
<button (click)="passData()">Send Data To Parent</button>
</div>





app.componet.ts

export class AppComponent {
  username: string = "Dell India";
  childData: string;
  parentMethod(cdata) {
    this.childData = cdata
  }
}

app.component.html

<div>
  <h1>Parent Component--Root Component</h1>
  <h1>Child Data:{{childData}}</h1>
  <child  [uname]="username" (notify)="parentMethod($event)"> </child>

</div>


ng g s servicename




@Injectable

HttpClient--get,post,put,delete

JSON:
		Router.navigate 
		
		

		router.navigate(['/users',this.userid])
		router.navigate(['/users',{id:this.userid,name:this.username}])
			
			activatedroute.snapshot.paramMap.get('id')
router.navigate(['/users'],{queryParams:{eid:123,ename:"sandeep"}});






https://angular.io/api/router/Params

Matrix and Query Params 	




CanActivate	:checks to see if a user can visit the route 
canActivateChild
CanDeactivate
Resolve
canMatch
canLoad.....




ng generate guard
					guardname
					canactivate

	path:"users",component:UsersComponent,canactivate




Angular Forms:
=============

	TDF		
					1)import FormsModule  in app.module.ts (imports)
			
					2)ngForm(name of form),ngModel template variable #userform
					
					Validations
		
	
	RF(Model driven forms/dynamic forms)
	

					1)import ReactiveFormsModule  in app.module.ts (imports)
			
					2)formGroup,formControlName


			FormGroup
			FormControl...


Field related state

	untouched :the field has not touched yet
	touched :the field has been  touched 
	pristine :the field has not modified yet 
	dirty :the field has been modified  
	invalid:the field content is not valid
	valid:the field content is  valid
	
Form related state

	pristine :no fields has not modified yet 
	dirty :one or more has been modified  
	invalid:the form content is not valid
	valid:the fomr content is  valid
	submitted: the form submitted




Validators




Lazy Loading:
============
* By default angular modules are eagerly loaded 

		loadChildren


const routes: Routes = [
  {
    path: 'items',
    loadChildren: () => import('./items/items.module').then(m => m.ItemsModule)
  }
];




Component directives

structural directives		*ngIf,*ngFor.....

attribute directives 		[ngStyle] [ngClass]
	

NGRX
Security




Inbuild 

	required ,minlength,maxlength,email....predefined 

FormGroup
({
uname:['',[Validators.required,Validators.maxLength(10),passValidate]]




})


	
Custom validator

password 

passValidate(ref)
{


}









Case Study:
=============Bootstrap
		databinding -->{{}},(ngSubmit),[]
		directives
		lazy loading
		forms(TDF,MDF--->including)
		routing,@input,@output,EventEmiiter
		authguards
		storage(ls,ss)
		pipes
		json-server
		services(HttpClient)


	Login,Registration

Bank Application



	style="color:red"


firebase 


npm install -g firebase-tools


LOgin https://console.firebase.google.com/u/0/?pli=1

firebase init hosting

Animations & Transition:
======================
	BrowserAnimationsModule -->from 'angular/platform-browser/animations'




app.component.ts


@Component
{
selector
templateUrl
styleUrl
animations:[



]


}

to register animation -->trigger()

			name of animation
			array of metadata

transition ()-->when the animation should start...
style()
animate()

:enter
:leave

animations:[
trigger('fade',[
transition (':enter',[
style({...}),
animate(1000,style({....}))


]),
transition (':leave',[
style({...})
animate(1000,style({....}))
])

]
)


animate()


]


@triggername 



https://angular.io/guide/animations


















https://www.youtube.com/watch?v=xSqETCJtT2M&list=PLOa5YIicjJ-XalPcuhk2suHU0l84UdRc6

